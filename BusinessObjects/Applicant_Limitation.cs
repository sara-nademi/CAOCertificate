//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Applicant_limitation
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int ApplicantID
        {
            get { return _applicantID; }
            set
            {
                if (_applicantID != value)
                {
                    if (ApplicantEntity != null && ApplicantEntity.Id != value)
                    {
                        ApplicantEntity = null;
                    }
                    _applicantID = value;
                }
            }
        }
        private int _applicantID;
    
        public virtual int LImitationLookupID
        {
            get { return _lImitationLookupID; }
            set
            {
                if (_lImitationLookupID != value)
                {
                    if (LimitationLookUpEntity != null && LimitationLookUpEntity.Id != value)
                    {
                        LimitationLookUpEntity = null;
                    }
                    _lImitationLookupID = value;
                }
            }
        }
        private int _lImitationLookupID;
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Lookup LimitationLookUpEntity
        {
            get { return _limitationLookUpEntity; }
            set
            {
                if (!ReferenceEquals(_limitationLookUpEntity, value))
                {
                    var previousValue = _limitationLookUpEntity;
                    _limitationLookUpEntity = value;
                    FixupLimitationLookUpEntity(previousValue);
                }
            }
        }
        private Lookup _limitationLookUpEntity;
    
        public virtual Applicant ApplicantEntity
        {
            get { return _applicantEntity; }
            set
            {
                if (!ReferenceEquals(_applicantEntity, value))
                {
                    var previousValue = _applicantEntity;
                    _applicantEntity = value;
                    FixupApplicantEntity(previousValue);
                }
            }
        }
        private Applicant _applicantEntity;

        #endregion
        #region Association Fixup
    
        private void FixupLimitationLookUpEntity(Lookup previousValue)
        {
            if (previousValue != null && previousValue.Applicant_limitations.Contains(this))
            {
                previousValue.Applicant_limitations.Remove(this);
            }
    
            if (LimitationLookUpEntity != null)
            {
                if (!LimitationLookUpEntity.Applicant_limitations.Contains(this))
                {
                    LimitationLookUpEntity.Applicant_limitations.Add(this);
                }
                if (LImitationLookupID != LimitationLookUpEntity.Id)
                {
                    LImitationLookupID = LimitationLookUpEntity.Id;
                }
            }
        }
    
        private void FixupApplicantEntity(Applicant previousValue)
        {
            if (previousValue != null && previousValue.Applicant_limitations.Contains(this))
            {
                previousValue.Applicant_limitations.Remove(this);
            }
    
            if (ApplicantEntity != null)
            {
                if (!ApplicantEntity.Applicant_limitations.Contains(this))
                {
                    ApplicantEntity.Applicant_limitations.Add(this);
                }
                if (ApplicantID != ApplicantEntity.Id)
                {
                    ApplicantID = ApplicantEntity.Id;
                }
            }
        }

        #endregion
    }
}
