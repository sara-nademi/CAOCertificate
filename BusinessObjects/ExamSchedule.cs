//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class ExamSchedule
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int ExamId
        {
            get { return _examId; }
            set
            {
                if (_examId != value)
                {
                    if (ExamEntity != null && ExamEntity.Id != value)
                    {
                        ExamEntity = null;
                    }
                    _examId = value;
                }
            }
        }
        private int _examId;
    
        public virtual System.DateTime ScheduleDate
        {
            get;
            set;
        }
    
        public virtual short Capacity
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Exam ExamEntity
        {
            get { return _examEntity; }
            set
            {
                if (!ReferenceEquals(_examEntity, value))
                {
                    var previousValue = _examEntity;
                    _examEntity = value;
                    FixupExamEntity(previousValue);
                }
            }
        }
        private Exam _examEntity;
    
        public virtual ICollection<Seat> Seats
        {
            get
            {
                if (_seats == null)
                {
                    var newCollection = new FixupCollection<Seat>();
                    newCollection.CollectionChanged += FixupSeats;
                    _seats = newCollection;
                }
                return _seats;
            }
            set
            {
                if (!ReferenceEquals(_seats, value))
                {
                    var previousValue = _seats as FixupCollection<Seat>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSeats;
                    }
                    _seats = value;
                    var newValue = value as FixupCollection<Seat>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSeats;
                    }
                }
            }
        }
        private ICollection<Seat> _seats;
    
        public virtual ICollection<ExamScheduleHistory> ExamScheduleHistories
        {
            get
            {
                if (_examScheduleHistories == null)
                {
                    var newCollection = new FixupCollection<ExamScheduleHistory>();
                    newCollection.CollectionChanged += FixupExamScheduleHistories;
                    _examScheduleHistories = newCollection;
                }
                return _examScheduleHistories;
            }
            set
            {
                if (!ReferenceEquals(_examScheduleHistories, value))
                {
                    var previousValue = _examScheduleHistories as FixupCollection<ExamScheduleHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExamScheduleHistories;
                    }
                    _examScheduleHistories = value;
                    var newValue = value as FixupCollection<ExamScheduleHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExamScheduleHistories;
                    }
                }
            }
        }
        private ICollection<ExamScheduleHistory> _examScheduleHistories;

        #endregion
        #region Association Fixup
    
        private void FixupExamEntity(Exam previousValue)
        {
            if (previousValue != null && previousValue.ExamSchedules.Contains(this))
            {
                previousValue.ExamSchedules.Remove(this);
            }
    
            if (ExamEntity != null)
            {
                if (!ExamEntity.ExamSchedules.Contains(this))
                {
                    ExamEntity.ExamSchedules.Add(this);
                }
                if (ExamId != ExamEntity.Id)
                {
                    ExamId = ExamEntity.Id;
                }
            }
        }
    
        private void FixupSeats(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Seat item in e.NewItems)
                {
                    item.ExamScheduleEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Seat item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExamScheduleEntity, this))
                    {
                        item.ExamScheduleEntity = null;
                    }
                }
            }
        }
    
        private void FixupExamScheduleHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ExamScheduleHistory item in e.NewItems)
                {
                    item.ExamScheduleEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ExamScheduleHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExamScheduleEntity, this))
                    {
                        item.ExamScheduleEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
