//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class PrerequisiteCertificateSet
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int CertificateID
        {
            get { return _certificateID; }
            set
            {
                if (_certificateID != value)
                {
                    if (MainCertificateEntity != null && MainCertificateEntity.Id != value)
                    {
                        MainCertificateEntity = null;
                    }
                    _certificateID = value;
                }
            }
        }
        private int _certificateID;
    
        public virtual Nullable<short> RequestID
        {
            get;
            set;
        }
    
        public virtual int PrerequisiteCertificateID
        {
            get { return _prerequisiteCertificateID; }
            set
            {
                if (_prerequisiteCertificateID != value)
                {
                    if (PrerequisiteCertificateEntity != null && PrerequisiteCertificateEntity.Id != value)
                    {
                        PrerequisiteCertificateEntity = null;
                    }
                    _prerequisiteCertificateID = value;
                }
            }
        }
        private int _prerequisiteCertificateID;
    
        public virtual Nullable<short> CertificateType
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Certificate MainCertificateEntity
        {
            get { return _mainCertificateEntity; }
            set
            {
                if (!ReferenceEquals(_mainCertificateEntity, value))
                {
                    var previousValue = _mainCertificateEntity;
                    _mainCertificateEntity = value;
                    FixupMainCertificateEntity(previousValue);
                }
            }
        }
        private Certificate _mainCertificateEntity;
    
        public virtual Certificate PrerequisiteCertificateEntity
        {
            get { return _prerequisiteCertificateEntity; }
            set
            {
                if (!ReferenceEquals(_prerequisiteCertificateEntity, value))
                {
                    var previousValue = _prerequisiteCertificateEntity;
                    _prerequisiteCertificateEntity = value;
                    FixupPrerequisiteCertificateEntity(previousValue);
                }
            }
        }
        private Certificate _prerequisiteCertificateEntity;

        #endregion
        #region Association Fixup
    
        private void FixupMainCertificateEntity(Certificate previousValue)
        {
            if (previousValue != null && previousValue.MainCertificates.Contains(this))
            {
                previousValue.MainCertificates.Remove(this);
            }
    
            if (MainCertificateEntity != null)
            {
                if (!MainCertificateEntity.MainCertificates.Contains(this))
                {
                    MainCertificateEntity.MainCertificates.Add(this);
                }
                if (CertificateID != MainCertificateEntity.Id)
                {
                    CertificateID = MainCertificateEntity.Id;
                }
            }
        }
    
        private void FixupPrerequisiteCertificateEntity(Certificate previousValue)
        {
            if (previousValue != null && previousValue.PrerequisiteCertificates.Contains(this))
            {
                previousValue.PrerequisiteCertificates.Remove(this);
            }
    
            if (PrerequisiteCertificateEntity != null)
            {
                if (!PrerequisiteCertificateEntity.PrerequisiteCertificates.Contains(this))
                {
                    PrerequisiteCertificateEntity.PrerequisiteCertificates.Add(this);
                }
                if (PrerequisiteCertificateID != PrerequisiteCertificateEntity.Id)
                {
                    PrerequisiteCertificateID = PrerequisiteCertificateEntity.Id;
                }
            }
        }

        #endregion
    }
}
