//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class FlightExpert_Certificate
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int FlightExpertID
        {
            get { return _flightExpertID; }
            set
            {
                if (_flightExpertID != value)
                {
                    if (FlightExpertEntity != null && FlightExpertEntity.Id != value)
                    {
                        FlightExpertEntity = null;
                    }
                    _flightExpertID = value;
                }
            }
        }
        private int _flightExpertID;
    
        public virtual int CertificateID
        {
            get { return _certificateID; }
            set
            {
                if (_certificateID != value)
                {
                    if (CertificateEntity != null && CertificateEntity.Id != value)
                    {
                        CertificateEntity = null;
                    }
                    _certificateID = value;
                }
            }
        }
        private int _certificateID;
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual FlightExperts FlightExpertEntity
        {
            get { return _flightExpertEntity; }
            set
            {
                if (!ReferenceEquals(_flightExpertEntity, value))
                {
                    var previousValue = _flightExpertEntity;
                    _flightExpertEntity = value;
                    FixupFlightExpertEntity(previousValue);
                }
            }
        }
        private FlightExperts _flightExpertEntity;
    
        public virtual Certificate CertificateEntity
        {
            get { return _certificateEntity; }
            set
            {
                if (!ReferenceEquals(_certificateEntity, value))
                {
                    var previousValue = _certificateEntity;
                    _certificateEntity = value;
                    FixupCertificateEntity(previousValue);
                }
            }
        }
        private Certificate _certificateEntity;

        #endregion
        #region Association Fixup
    
        private void FixupFlightExpertEntity(FlightExperts previousValue)
        {
            if (previousValue != null && previousValue.FlightExpert_Certificates.Contains(this))
            {
                previousValue.FlightExpert_Certificates.Remove(this);
            }
    
            if (FlightExpertEntity != null)
            {
                if (!FlightExpertEntity.FlightExpert_Certificates.Contains(this))
                {
                    FlightExpertEntity.FlightExpert_Certificates.Add(this);
                }
                if (FlightExpertID != FlightExpertEntity.Id)
                {
                    FlightExpertID = FlightExpertEntity.Id;
                }
            }
        }
    
        private void FixupCertificateEntity(Certificate previousValue)
        {
            if (previousValue != null && previousValue.FlightExpert_Certificates.Contains(this))
            {
                previousValue.FlightExpert_Certificates.Remove(this);
            }
    
            if (CertificateEntity != null)
            {
                if (!CertificateEntity.FlightExpert_Certificates.Contains(this))
                {
                    CertificateEntity.FlightExpert_Certificates.Add(this);
                }
                if (CertificateID != CertificateEntity.Id)
                {
                    CertificateID = CertificateEntity.Id;
                }
            }
        }

        #endregion
    }
}
