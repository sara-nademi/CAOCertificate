//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Bank
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual short Code
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Account> Account
        {
            get
            {
                if (_account == null)
                {
                    var newCollection = new FixupCollection<Account>();
                    newCollection.CollectionChanged += FixupAccount;
                    _account = newCollection;
                }
                return _account;
            }
            set
            {
                if (!ReferenceEquals(_account, value))
                {
                    var previousValue = _account as FixupCollection<Account>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAccount;
                    }
                    _account = value;
                    var newValue = value as FixupCollection<Account>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAccount;
                    }
                }
            }
        }
        private ICollection<Account> _account;
    
        public virtual ICollection<EPaymentHistory> EPaymentHistory
        {
            get
            {
                if (_ePaymentHistory == null)
                {
                    var newCollection = new FixupCollection<EPaymentHistory>();
                    newCollection.CollectionChanged += FixupEPaymentHistory;
                    _ePaymentHistory = newCollection;
                }
                return _ePaymentHistory;
            }
            set
            {
                if (!ReferenceEquals(_ePaymentHistory, value))
                {
                    var previousValue = _ePaymentHistory as FixupCollection<EPaymentHistory>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEPaymentHistory;
                    }
                    _ePaymentHistory = value;
                    var newValue = value as FixupCollection<EPaymentHistory>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEPaymentHistory;
                    }
                }
            }
        }
        private ICollection<EPaymentHistory> _ePaymentHistory;

        #endregion
        #region Association Fixup
    
        private void FixupAccount(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Account item in e.NewItems)
                {
                    item.BankEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Account item in e.OldItems)
                {
                    if (ReferenceEquals(item.BankEntity, this))
                    {
                        item.BankEntity = null;
                    }
                }
            }
        }
    
        private void FixupEPaymentHistory(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EPaymentHistory item in e.NewItems)
                {
                    item.BankEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EPaymentHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.BankEntity, this))
                    {
                        item.BankEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
