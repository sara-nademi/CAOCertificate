//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Member
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual int MainPersonID
        {
            get { return _mainPersonID; }
            set
            {
                if (_mainPersonID != value)
                {
                    if (MainPersonEntity != null && MainPersonEntity.Id != value)
                    {
                        MainPersonEntity = null;
                    }
                    _mainPersonID = value;
                }
            }
        }
        private int _mainPersonID;
    
        public virtual int RelatedPersonID
        {
            get { return _relatedPersonID; }
            set
            {
                if (_relatedPersonID != value)
                {
                    if (RelatedPersonEntity != null && RelatedPersonEntity.Id != value)
                    {
                        RelatedPersonEntity = null;
                    }
                    _relatedPersonID = value;
                }
            }
        }
        private int _relatedPersonID;
    
        public virtual long RelationType
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Person MainPersonEntity
        {
            get { return _mainPersonEntity; }
            set
            {
                if (!ReferenceEquals(_mainPersonEntity, value))
                {
                    var previousValue = _mainPersonEntity;
                    _mainPersonEntity = value;
                    FixupMainPersonEntity(previousValue);
                }
            }
        }
        private Person _mainPersonEntity;
    
        public virtual Person RelatedPersonEntity
        {
            get { return _relatedPersonEntity; }
            set
            {
                if (!ReferenceEquals(_relatedPersonEntity, value))
                {
                    var previousValue = _relatedPersonEntity;
                    _relatedPersonEntity = value;
                    FixupRelatedPersonEntity(previousValue);
                }
            }
        }
        private Person _relatedPersonEntity;

        #endregion
        #region Association Fixup
    
        private void FixupMainPersonEntity(Person previousValue)
        {
            if (previousValue != null && previousValue.MainMembers.Contains(this))
            {
                previousValue.MainMembers.Remove(this);
            }
    
            if (MainPersonEntity != null)
            {
                if (!MainPersonEntity.MainMembers.Contains(this))
                {
                    MainPersonEntity.MainMembers.Add(this);
                }
                if (MainPersonID != MainPersonEntity.Id)
                {
                    MainPersonID = MainPersonEntity.Id;
                }
            }
        }
    
        private void FixupRelatedPersonEntity(Person previousValue)
        {
            if (previousValue != null && previousValue.RelatedMembers.Contains(this))
            {
                previousValue.RelatedMembers.Remove(this);
            }
    
            if (RelatedPersonEntity != null)
            {
                if (!RelatedPersonEntity.RelatedMembers.Contains(this))
                {
                    RelatedPersonEntity.RelatedMembers.Add(this);
                }
                if (RelatedPersonID != RelatedPersonEntity.Id)
                {
                    RelatedPersonID = RelatedPersonEntity.Id;
                }
            }
        }

        #endregion
    }
}
