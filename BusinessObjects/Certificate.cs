//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Certificate
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ParentID
        {
            get { return _parentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentID != value)
                    {
                        if (CertificateParent != null && CertificateParent.Id != value)
                        {
                            CertificateParent = null;
                        }
                        _parentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentID;
    
        public virtual string CompliteTitle
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual bool IsMedical
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Validity
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }
    
        public virtual Nullable<short> CertificateTypeId
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Certificate> CertificateChilds
        {
            get
            {
                if (_certificateChilds == null)
                {
                    var newCollection = new FixupCollection<Certificate>();
                    newCollection.CollectionChanged += FixupCertificateChilds;
                    _certificateChilds = newCollection;
                }
                return _certificateChilds;
            }
            set
            {
                if (!ReferenceEquals(_certificateChilds, value))
                {
                    var previousValue = _certificateChilds as FixupCollection<Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificateChilds;
                    }
                    _certificateChilds = value;
                    var newValue = value as FixupCollection<Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificateChilds;
                    }
                }
            }
        }
        private ICollection<Certificate> _certificateChilds;
    
        public virtual Certificate CertificateParent
        {
            get { return _certificateParent; }
            set
            {
                if (!ReferenceEquals(_certificateParent, value))
                {
                    var previousValue = _certificateParent;
                    _certificateParent = value;
                    FixupCertificateParent(previousValue);
                }
            }
        }
        private Certificate _certificateParent;
    
        public virtual ICollection<Applicant_Certificate> Applicant_Certificates
        {
            get
            {
                if (_applicant_Certificates == null)
                {
                    var newCollection = new FixupCollection<Applicant_Certificate>();
                    newCollection.CollectionChanged += FixupApplicant_Certificates;
                    _applicant_Certificates = newCollection;
                }
                return _applicant_Certificates;
            }
            set
            {
                if (!ReferenceEquals(_applicant_Certificates, value))
                {
                    var previousValue = _applicant_Certificates as FixupCollection<Applicant_Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicant_Certificates;
                    }
                    _applicant_Certificates = value;
                    var newValue = value as FixupCollection<Applicant_Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicant_Certificates;
                    }
                }
            }
        }
        private ICollection<Applicant_Certificate> _applicant_Certificates;
    
        public virtual ICollection<Request> Requests
        {
            get
            {
                if (_requests == null)
                {
                    var newCollection = new FixupCollection<Request>();
                    newCollection.CollectionChanged += FixupRequests;
                    _requests = newCollection;
                }
                return _requests;
            }
            set
            {
                if (!ReferenceEquals(_requests, value))
                {
                    var previousValue = _requests as FixupCollection<Request>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRequests;
                    }
                    _requests = value;
                    var newValue = value as FixupCollection<Request>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRequests;
                    }
                }
            }
        }
        private ICollection<Request> _requests;
    
        public virtual ICollection<Certificate_Service> Certificate_Services
        {
            get
            {
                if (_certificate_Services == null)
                {
                    var newCollection = new FixupCollection<Certificate_Service>();
                    newCollection.CollectionChanged += FixupCertificate_Services;
                    _certificate_Services = newCollection;
                }
                return _certificate_Services;
            }
            set
            {
                if (!ReferenceEquals(_certificate_Services, value))
                {
                    var previousValue = _certificate_Services as FixupCollection<Certificate_Service>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificate_Services;
                    }
                    _certificate_Services = value;
                    var newValue = value as FixupCollection<Certificate_Service>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificate_Services;
                    }
                }
            }
        }
        private ICollection<Certificate_Service> _certificate_Services;
    
        public virtual ICollection<Exam> Exams
        {
            get
            {
                if (_exams == null)
                {
                    var newCollection = new FixupCollection<Exam>();
                    newCollection.CollectionChanged += FixupExams;
                    _exams = newCollection;
                }
                return _exams;
            }
            set
            {
                if (!ReferenceEquals(_exams, value))
                {
                    var previousValue = _exams as FixupCollection<Exam>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupExams;
                    }
                    _exams = value;
                    var newValue = value as FixupCollection<Exam>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupExams;
                    }
                }
            }
        }
        private ICollection<Exam> _exams;
    
        public virtual ICollection<FlightExpert_Certificate> FlightExpert_Certificates
        {
            get
            {
                if (_flightExpert_Certificates == null)
                {
                    var newCollection = new FixupCollection<FlightExpert_Certificate>();
                    newCollection.CollectionChanged += FixupFlightExpert_Certificates;
                    _flightExpert_Certificates = newCollection;
                }
                return _flightExpert_Certificates;
            }
            set
            {
                if (!ReferenceEquals(_flightExpert_Certificates, value))
                {
                    var previousValue = _flightExpert_Certificates as FixupCollection<FlightExpert_Certificate>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupFlightExpert_Certificates;
                    }
                    _flightExpert_Certificates = value;
                    var newValue = value as FixupCollection<FlightExpert_Certificate>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupFlightExpert_Certificates;
                    }
                }
            }
        }
        private ICollection<FlightExpert_Certificate> _flightExpert_Certificates;
    
        public virtual ICollection<PrerequisiteCertificateSet> MainCertificates
        {
            get
            {
                if (_mainCertificates == null)
                {
                    var newCollection = new FixupCollection<PrerequisiteCertificateSet>();
                    newCollection.CollectionChanged += FixupMainCertificates;
                    _mainCertificates = newCollection;
                }
                return _mainCertificates;
            }
            set
            {
                if (!ReferenceEquals(_mainCertificates, value))
                {
                    var previousValue = _mainCertificates as FixupCollection<PrerequisiteCertificateSet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainCertificates;
                    }
                    _mainCertificates = value;
                    var newValue = value as FixupCollection<PrerequisiteCertificateSet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainCertificates;
                    }
                }
            }
        }
        private ICollection<PrerequisiteCertificateSet> _mainCertificates;
    
        public virtual ICollection<PrerequisiteCertificateSet> PrerequisiteCertificates
        {
            get
            {
                if (_prerequisiteCertificates == null)
                {
                    var newCollection = new FixupCollection<PrerequisiteCertificateSet>();
                    newCollection.CollectionChanged += FixupPrerequisiteCertificates;
                    _prerequisiteCertificates = newCollection;
                }
                return _prerequisiteCertificates;
            }
            set
            {
                if (!ReferenceEquals(_prerequisiteCertificates, value))
                {
                    var previousValue = _prerequisiteCertificates as FixupCollection<PrerequisiteCertificateSet>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPrerequisiteCertificates;
                    }
                    _prerequisiteCertificates = value;
                    var newValue = value as FixupCollection<PrerequisiteCertificateSet>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPrerequisiteCertificates;
                    }
                }
            }
        }
        private ICollection<PrerequisiteCertificateSet> _prerequisiteCertificates;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCertificateParent(Certificate previousValue)
        {
            if (previousValue != null && previousValue.CertificateChilds.Contains(this))
            {
                previousValue.CertificateChilds.Remove(this);
            }
    
            if (CertificateParent != null)
            {
                if (!CertificateParent.CertificateChilds.Contains(this))
                {
                    CertificateParent.CertificateChilds.Add(this);
                }
                if (ParentID != CertificateParent.Id)
                {
                    ParentID = CertificateParent.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentID = null;
            }
        }
    
        private void FixupCertificateChilds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate item in e.NewItems)
                {
                    item.CertificateParent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateParent, this))
                    {
                        item.CertificateParent = null;
                    }
                }
            }
        }
    
        private void FixupApplicant_Certificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Applicant_Certificate item in e.NewItems)
                {
                    item.CertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Applicant_Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateEntity, this))
                    {
                        item.CertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Request item in e.NewItems)
                {
                    item.CertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateEntity, this))
                    {
                        item.CertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupCertificate_Services(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate_Service item in e.NewItems)
                {
                    item.CertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate_Service item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateEntity, this))
                    {
                        item.CertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupExams(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Exam item in e.NewItems)
                {
                    item.CertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Exam item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateEntity, this))
                    {
                        item.CertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupFlightExpert_Certificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (FlightExpert_Certificate item in e.NewItems)
                {
                    item.CertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FlightExpert_Certificate item in e.OldItems)
                {
                    if (ReferenceEquals(item.CertificateEntity, this))
                    {
                        item.CertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupMainCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PrerequisiteCertificateSet item in e.NewItems)
                {
                    item.MainCertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PrerequisiteCertificateSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.MainCertificateEntity, this))
                    {
                        item.MainCertificateEntity = null;
                    }
                }
            }
        }
    
        private void FixupPrerequisiteCertificates(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PrerequisiteCertificateSet item in e.NewItems)
                {
                    item.PrerequisiteCertificateEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PrerequisiteCertificateSet item in e.OldItems)
                {
                    if (ReferenceEquals(item.PrerequisiteCertificateEntity, this))
                    {
                        item.PrerequisiteCertificateEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
