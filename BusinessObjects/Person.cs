//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Person
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual Nullable<int> EntityID
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get { return _isActive; }
            set { _isActive = value; }
        }
        private bool _isActive = true;
    
        public virtual byte PersonType
        {
            get;
            set;
        }
    
        public virtual bool IsFemail
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string FirstName_EN
        {
            get;
            set;
        }
    
        public virtual string LastName_EN
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Complex Properties
    
        public virtual ContactInfoCTP ContactInfoCTP
        {
            get { return _contactInfoCTP; }
            set { _contactInfoCTP = value; }
        }
        private ContactInfoCTP _contactInfoCTP = new ContactInfoCTP();

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Member> MainMembers
        {
            get
            {
                if (_mainMembers == null)
                {
                    var newCollection = new FixupCollection<Member>();
                    newCollection.CollectionChanged += FixupMainMembers;
                    _mainMembers = newCollection;
                }
                return _mainMembers;
            }
            set
            {
                if (!ReferenceEquals(_mainMembers, value))
                {
                    var previousValue = _mainMembers as FixupCollection<Member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMainMembers;
                    }
                    _mainMembers = value;
                    var newValue = value as FixupCollection<Member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMainMembers;
                    }
                }
            }
        }
        private ICollection<Member> _mainMembers;
    
        public virtual ICollection<Member> RelatedMembers
        {
            get
            {
                if (_relatedMembers == null)
                {
                    var newCollection = new FixupCollection<Member>();
                    newCollection.CollectionChanged += FixupRelatedMembers;
                    _relatedMembers = newCollection;
                }
                return _relatedMembers;
            }
            set
            {
                if (!ReferenceEquals(_relatedMembers, value))
                {
                    var previousValue = _relatedMembers as FixupCollection<Member>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRelatedMembers;
                    }
                    _relatedMembers = value;
                    var newValue = value as FixupCollection<Member>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRelatedMembers;
                    }
                }
            }
        }
        private ICollection<Member> _relatedMembers;
    
        public virtual ICollection<Request> CompanyRequests
        {
            get
            {
                if (_companyRequests == null)
                {
                    var newCollection = new FixupCollection<Request>();
                    newCollection.CollectionChanged += FixupCompanyRequests;
                    _companyRequests = newCollection;
                }
                return _companyRequests;
            }
            set
            {
                if (!ReferenceEquals(_companyRequests, value))
                {
                    var previousValue = _companyRequests as FixupCollection<Request>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCompanyRequests;
                    }
                    _companyRequests = value;
                    var newValue = value as FixupCollection<Request>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCompanyRequests;
                    }
                }
            }
        }
        private ICollection<Request> _companyRequests;
    
        public virtual ICollection<Request> ApplicantRequests
        {
            get
            {
                if (_applicantRequests == null)
                {
                    var newCollection = new FixupCollection<Request>();
                    newCollection.CollectionChanged += FixupApplicantRequests;
                    _applicantRequests = newCollection;
                }
                return _applicantRequests;
            }
            set
            {
                if (!ReferenceEquals(_applicantRequests, value))
                {
                    var previousValue = _applicantRequests as FixupCollection<Request>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicantRequests;
                    }
                    _applicantRequests = value;
                    var newValue = value as FixupCollection<Request>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicantRequests;
                    }
                }
            }
        }
        private ICollection<Request> _applicantRequests;
    
        public virtual ICollection<MedicalRequest> MedicalRequests
        {
            get
            {
                if (_medicalRequests == null)
                {
                    var newCollection = new FixupCollection<MedicalRequest>();
                    newCollection.CollectionChanged += FixupMedicalRequests;
                    _medicalRequests = newCollection;
                }
                return _medicalRequests;
            }
            set
            {
                if (!ReferenceEquals(_medicalRequests, value))
                {
                    var previousValue = _medicalRequests as FixupCollection<MedicalRequest>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMedicalRequests;
                    }
                    _medicalRequests = value;
                    var newValue = value as FixupCollection<MedicalRequest>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMedicalRequests;
                    }
                }
            }
        }
        private ICollection<MedicalRequest> _medicalRequests;
    
        public virtual ICollection<Request_Doctor> RequestDoctors
        {
            get
            {
                if (_requestDoctors == null)
                {
                    var newCollection = new FixupCollection<Request_Doctor>();
                    newCollection.CollectionChanged += FixupRequestDoctors;
                    _requestDoctors = newCollection;
                }
                return _requestDoctors;
            }
            set
            {
                if (!ReferenceEquals(_requestDoctors, value))
                {
                    var previousValue = _requestDoctors as FixupCollection<Request_Doctor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRequestDoctors;
                    }
                    _requestDoctors = value;
                    var newValue = value as FixupCollection<Request_Doctor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRequestDoctors;
                    }
                }
            }
        }
        private ICollection<Request_Doctor> _requestDoctors;
    
        public virtual ICollection<Lookup> Services
        {
            get
            {
                if (_services == null)
                {
                    var newCollection = new FixupCollection<Lookup>();
                    newCollection.CollectionChanged += FixupServices;
                    _services = newCollection;
                }
                return _services;
            }
            set
            {
                if (!ReferenceEquals(_services, value))
                {
                    var previousValue = _services as FixupCollection<Lookup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupServices;
                    }
                    _services = value;
                    var newValue = value as FixupCollection<Lookup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupServices;
                    }
                }
            }
        }
        private ICollection<Lookup> _services;
    
        public virtual ICollection<CheckupForm> CheckupForms
        {
            get
            {
                if (_checkupForms == null)
                {
                    var newCollection = new FixupCollection<CheckupForm>();
                    newCollection.CollectionChanged += FixupCheckupForms;
                    _checkupForms = newCollection;
                }
                return _checkupForms;
            }
            set
            {
                if (!ReferenceEquals(_checkupForms, value))
                {
                    var previousValue = _checkupForms as FixupCollection<CheckupForm>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCheckupForms;
                    }
                    _checkupForms = value;
                    var newValue = value as FixupCollection<CheckupForm>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCheckupForms;
                    }
                }
            }
        }
        private ICollection<CheckupForm> _checkupForms;

        #endregion
        #region Association Fixup
    
        private void FixupMainMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Member item in e.NewItems)
                {
                    item.MainPersonEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Member item in e.OldItems)
                {
                    if (ReferenceEquals(item.MainPersonEntity, this))
                    {
                        item.MainPersonEntity = null;
                    }
                }
            }
        }
    
        private void FixupRelatedMembers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Member item in e.NewItems)
                {
                    item.RelatedPersonEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Member item in e.OldItems)
                {
                    if (ReferenceEquals(item.RelatedPersonEntity, this))
                    {
                        item.RelatedPersonEntity = null;
                    }
                }
            }
        }
    
        private void FixupCompanyRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Request item in e.NewItems)
                {
                    item.CompanyEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request item in e.OldItems)
                {
                    if (ReferenceEquals(item.CompanyEntity, this))
                    {
                        item.CompanyEntity = null;
                    }
                }
            }
        }
    
        private void FixupApplicantRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Request item in e.NewItems)
                {
                    item.ApplicantEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request item in e.OldItems)
                {
                    if (ReferenceEquals(item.ApplicantEntity, this))
                    {
                        item.ApplicantEntity = null;
                    }
                }
            }
        }
    
        private void FixupMedicalRequests(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MedicalRequest item in e.NewItems)
                {
                    item.ClinicEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MedicalRequest item in e.OldItems)
                {
                    if (ReferenceEquals(item.ClinicEntity, this))
                    {
                        item.ClinicEntity = null;
                    }
                }
            }
        }
    
        private void FixupRequestDoctors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Request_Doctor item in e.NewItems)
                {
                    item.PersonEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request_Doctor item in e.OldItems)
                {
                    if (ReferenceEquals(item.PersonEntity, this))
                    {
                        item.PersonEntity = null;
                    }
                }
            }
        }
    
        private void FixupServices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lookup item in e.NewItems)
                {
                    if (!item.Clinics.Contains(this))
                    {
                        item.Clinics.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lookup item in e.OldItems)
                {
                    if (item.Clinics.Contains(this))
                    {
                        item.Clinics.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCheckupForms(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CheckupForm item in e.NewItems)
                {
                    item.PersonEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CheckupForm item in e.OldItems)
                {
                    if (ReferenceEquals(item.PersonEntity, this))
                    {
                        item.PersonEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
