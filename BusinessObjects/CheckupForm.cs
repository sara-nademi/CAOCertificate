//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class CheckupForm
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int PersonId
        {
            get { return _personId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_personId != value)
                    {
                        if (PersonEntity != null && PersonEntity.Id != value)
                        {
                            PersonEntity = null;
                        }
                        _personId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _personId;
    
        public virtual Nullable<int> MedicalRequestId
        {
            get { return _medicalRequestId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_medicalRequestId != value)
                    {
                        if (MedicalRequestEntity != null && MedicalRequestEntity.Id != value)
                        {
                            MedicalRequestEntity = null;
                        }
                        _medicalRequestId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _medicalRequestId;
    
        public virtual Nullable<System.DateTime> FillDate
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Person PersonEntity
        {
            get { return _personEntity; }
            set
            {
                if (!ReferenceEquals(_personEntity, value))
                {
                    var previousValue = _personEntity;
                    _personEntity = value;
                    FixupPersonEntity(previousValue);
                }
            }
        }
        private Person _personEntity;
    
        public virtual MedicalRequest MedicalRequestEntity
        {
            get { return _medicalRequestEntity; }
            set
            {
                if (!ReferenceEquals(_medicalRequestEntity, value))
                {
                    var previousValue = _medicalRequestEntity;
                    _medicalRequestEntity = value;
                    FixupMedicalRequestEntity(previousValue);
                }
            }
        }
        private MedicalRequest _medicalRequestEntity;
    
        public virtual ICollection<CheckupFormValue> CheckupFormValues
        {
            get
            {
                if (_checkupFormValues == null)
                {
                    var newCollection = new FixupCollection<CheckupFormValue>();
                    newCollection.CollectionChanged += FixupCheckupFormValues;
                    _checkupFormValues = newCollection;
                }
                return _checkupFormValues;
            }
            set
            {
                if (!ReferenceEquals(_checkupFormValues, value))
                {
                    var previousValue = _checkupFormValues as FixupCollection<CheckupFormValue>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCheckupFormValues;
                    }
                    _checkupFormValues = value;
                    var newValue = value as FixupCollection<CheckupFormValue>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCheckupFormValues;
                    }
                }
            }
        }
        private ICollection<CheckupFormValue> _checkupFormValues;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupPersonEntity(Person previousValue)
        {
            if (previousValue != null && previousValue.CheckupForms.Contains(this))
            {
                previousValue.CheckupForms.Remove(this);
            }
    
            if (PersonEntity != null)
            {
                if (!PersonEntity.CheckupForms.Contains(this))
                {
                    PersonEntity.CheckupForms.Add(this);
                }
                if (PersonId != PersonEntity.Id)
                {
                    PersonId = PersonEntity.Id;
                }
            }
        }
    
        private void FixupMedicalRequestEntity(MedicalRequest previousValue)
        {
            if (previousValue != null && previousValue.CheckupForms.Contains(this))
            {
                previousValue.CheckupForms.Remove(this);
            }
    
            if (MedicalRequestEntity != null)
            {
                if (!MedicalRequestEntity.CheckupForms.Contains(this))
                {
                    MedicalRequestEntity.CheckupForms.Add(this);
                }
                if (MedicalRequestId != MedicalRequestEntity.Id)
                {
                    MedicalRequestId = MedicalRequestEntity.Id;
                }
            }
            else if (!_settingFK)
            {
                MedicalRequestId = null;
            }
        }
    
        private void FixupCheckupFormValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CheckupFormValue item in e.NewItems)
                {
                    item.CheckupFormEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CheckupFormValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.CheckupFormEntity, this))
                    {
                        item.CheckupFormEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
