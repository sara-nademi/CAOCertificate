//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Lookup
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int LookupTypeID
        {
            get { return _lookupTypeID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_lookupTypeID != value)
                    {
                        if (LookupTypeEntity != null && LookupTypeEntity.Id != value)
                        {
                            LookupTypeEntity = null;
                        }
                        _lookupTypeID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _lookupTypeID;
    
        public virtual Nullable<int> ParentID
        {
            get { return _parentID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_parentID != value)
                    {
                        if (LookupParent != null && LookupParent.Id != value)
                        {
                            LookupParent = null;
                        }
                        _parentID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _parentID;
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Type
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get;
            set;
        }
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string UpdateUserName
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual LookupType LookupTypeEntity
        {
            get { return _lookupTypeEntity; }
            set
            {
                if (!ReferenceEquals(_lookupTypeEntity, value))
                {
                    var previousValue = _lookupTypeEntity;
                    _lookupTypeEntity = value;
                    FixupLookupTypeEntity(previousValue);
                }
            }
        }
        private LookupType _lookupTypeEntity;
    
        public virtual ICollection<Doctor> Doctors
        {
            get
            {
                if (_doctors == null)
                {
                    var newCollection = new FixupCollection<Doctor>();
                    newCollection.CollectionChanged += FixupDoctors;
                    _doctors = newCollection;
                }
                return _doctors;
            }
            set
            {
                if (!ReferenceEquals(_doctors, value))
                {
                    var previousValue = _doctors as FixupCollection<Doctor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDoctors;
                    }
                    _doctors = value;
                    var newValue = value as FixupCollection<Doctor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDoctors;
                    }
                }
            }
        }
        private ICollection<Doctor> _doctors;
    
        public virtual ICollection<Lookup> LookupChilds
        {
            get
            {
                if (_lookupChilds == null)
                {
                    var newCollection = new FixupCollection<Lookup>();
                    newCollection.CollectionChanged += FixupLookupChilds;
                    _lookupChilds = newCollection;
                }
                return _lookupChilds;
            }
            set
            {
                if (!ReferenceEquals(_lookupChilds, value))
                {
                    var previousValue = _lookupChilds as FixupCollection<Lookup>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLookupChilds;
                    }
                    _lookupChilds = value;
                    var newValue = value as FixupCollection<Lookup>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLookupChilds;
                    }
                }
            }
        }
        private ICollection<Lookup> _lookupChilds;
    
        public virtual Lookup LookupParent
        {
            get { return _lookupParent; }
            set
            {
                if (!ReferenceEquals(_lookupParent, value))
                {
                    var previousValue = _lookupParent;
                    _lookupParent = value;
                    FixupLookupParent(previousValue);
                }
            }
        }
        private Lookup _lookupParent;
    
        public virtual ICollection<Attachment> Attachments
        {
            get
            {
                if (_attachments == null)
                {
                    var newCollection = new FixupCollection<Attachment>();
                    newCollection.CollectionChanged += FixupAttachments;
                    _attachments = newCollection;
                }
                return _attachments;
            }
            set
            {
                if (!ReferenceEquals(_attachments, value))
                {
                    var previousValue = _attachments as FixupCollection<Attachment>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupAttachments;
                    }
                    _attachments = value;
                    var newValue = value as FixupCollection<Attachment>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupAttachments;
                    }
                }
            }
        }
        private ICollection<Attachment> _attachments;
    
        public virtual ICollection<Person> Clinics
        {
            get
            {
                if (_clinics == null)
                {
                    var newCollection = new FixupCollection<Person>();
                    newCollection.CollectionChanged += FixupClinics;
                    _clinics = newCollection;
                }
                return _clinics;
            }
            set
            {
                if (!ReferenceEquals(_clinics, value))
                {
                    var previousValue = _clinics as FixupCollection<Person>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClinics;
                    }
                    _clinics = value;
                    var newValue = value as FixupCollection<Person>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClinics;
                    }
                }
            }
        }
        private ICollection<Person> _clinics;
    
        public virtual ICollection<Certificate_Service> Certificate_Services
        {
            get
            {
                if (_certificate_Services == null)
                {
                    var newCollection = new FixupCollection<Certificate_Service>();
                    newCollection.CollectionChanged += FixupCertificate_Services;
                    _certificate_Services = newCollection;
                }
                return _certificate_Services;
            }
            set
            {
                if (!ReferenceEquals(_certificate_Services, value))
                {
                    var previousValue = _certificate_Services as FixupCollection<Certificate_Service>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCertificate_Services;
                    }
                    _certificate_Services = value;
                    var newValue = value as FixupCollection<Certificate_Service>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCertificate_Services;
                    }
                }
            }
        }
        private ICollection<Certificate_Service> _certificate_Services;
    
        public virtual ICollection<Applicant_Service> Applicant_Services
        {
            get
            {
                if (_applicant_Services == null)
                {
                    var newCollection = new FixupCollection<Applicant_Service>();
                    newCollection.CollectionChanged += FixupApplicant_Services;
                    _applicant_Services = newCollection;
                }
                return _applicant_Services;
            }
            set
            {
                if (!ReferenceEquals(_applicant_Services, value))
                {
                    var previousValue = _applicant_Services as FixupCollection<Applicant_Service>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicant_Services;
                    }
                    _applicant_Services = value;
                    var newValue = value as FixupCollection<Applicant_Service>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicant_Services;
                    }
                }
            }
        }
        private ICollection<Applicant_Service> _applicant_Services;
    
        public virtual ICollection<Applicant_limitation> Applicant_limitations
        {
            get
            {
                if (_applicant_limitations == null)
                {
                    var newCollection = new FixupCollection<Applicant_limitation>();
                    newCollection.CollectionChanged += FixupApplicant_limitations;
                    _applicant_limitations = newCollection;
                }
                return _applicant_limitations;
            }
            set
            {
                if (!ReferenceEquals(_applicant_limitations, value))
                {
                    var previousValue = _applicant_limitations as FixupCollection<Applicant_limitation>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApplicant_limitations;
                    }
                    _applicant_limitations = value;
                    var newValue = value as FixupCollection<Applicant_limitation>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApplicant_limitations;
                    }
                }
            }
        }
        private ICollection<Applicant_limitation> _applicant_limitations;
    
        public virtual ICollection<CheckupFormValue> CheckupFormValues
        {
            get
            {
                if (_checkupFormValues == null)
                {
                    var newCollection = new FixupCollection<CheckupFormValue>();
                    newCollection.CollectionChanged += FixupCheckupFormValues;
                    _checkupFormValues = newCollection;
                }
                return _checkupFormValues;
            }
            set
            {
                if (!ReferenceEquals(_checkupFormValues, value))
                {
                    var previousValue = _checkupFormValues as FixupCollection<CheckupFormValue>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCheckupFormValues;
                    }
                    _checkupFormValues = value;
                    var newValue = value as FixupCollection<CheckupFormValue>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCheckupFormValues;
                    }
                }
            }
        }
        private ICollection<CheckupFormValue> _checkupFormValues;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupLookupTypeEntity(LookupType previousValue)
        {
            if (previousValue != null && previousValue.Lookups.Contains(this))
            {
                previousValue.Lookups.Remove(this);
            }
    
            if (LookupTypeEntity != null)
            {
                if (!LookupTypeEntity.Lookups.Contains(this))
                {
                    LookupTypeEntity.Lookups.Add(this);
                }
                if (LookupTypeID != LookupTypeEntity.Id)
                {
                    LookupTypeID = LookupTypeEntity.Id;
                }
            }
        }
    
        private void FixupLookupParent(Lookup previousValue)
        {
            if (previousValue != null && previousValue.LookupChilds.Contains(this))
            {
                previousValue.LookupChilds.Remove(this);
            }
    
            if (LookupParent != null)
            {
                if (!LookupParent.LookupChilds.Contains(this))
                {
                    LookupParent.LookupChilds.Add(this);
                }
                if (ParentID != LookupParent.Id)
                {
                    ParentID = LookupParent.Id;
                }
            }
            else if (!_settingFK)
            {
                ParentID = null;
            }
        }
    
        private void FixupDoctors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Doctor item in e.NewItems)
                {
                    item.ExpertiseLookupEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Doctor item in e.OldItems)
                {
                    if (ReferenceEquals(item.ExpertiseLookupEntity, this))
                    {
                        item.ExpertiseLookupEntity = null;
                    }
                }
            }
        }
    
        private void FixupLookupChilds(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Lookup item in e.NewItems)
                {
                    item.LookupParent = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Lookup item in e.OldItems)
                {
                    if (ReferenceEquals(item.LookupParent, this))
                    {
                        item.LookupParent = null;
                    }
                }
            }
        }
    
        private void FixupAttachments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Attachment item in e.NewItems)
                {
                    item.CategoryLookupEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Attachment item in e.OldItems)
                {
                    if (ReferenceEquals(item.CategoryLookupEntity, this))
                    {
                        item.CategoryLookupEntity = null;
                    }
                }
            }
        }
    
        private void FixupClinics(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Person item in e.NewItems)
                {
                    if (!item.Services.Contains(this))
                    {
                        item.Services.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Person item in e.OldItems)
                {
                    if (item.Services.Contains(this))
                    {
                        item.Services.Remove(this);
                    }
                }
            }
        }
    
        private void FixupCertificate_Services(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Certificate_Service item in e.NewItems)
                {
                    item.ServiceLookupEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Certificate_Service item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceLookupEntity, this))
                    {
                        item.ServiceLookupEntity = null;
                    }
                }
            }
        }
    
        private void FixupApplicant_Services(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Applicant_Service item in e.NewItems)
                {
                    item.ServiceEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Applicant_Service item in e.OldItems)
                {
                    if (ReferenceEquals(item.ServiceEntity, this))
                    {
                        item.ServiceEntity = null;
                    }
                }
            }
        }
    
        private void FixupApplicant_limitations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Applicant_limitation item in e.NewItems)
                {
                    item.LimitationLookUpEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Applicant_limitation item in e.OldItems)
                {
                    if (ReferenceEquals(item.LimitationLookUpEntity, this))
                    {
                        item.LimitationLookUpEntity = null;
                    }
                }
            }
        }
    
        private void FixupCheckupFormValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CheckupFormValue item in e.NewItems)
                {
                    item.ItemLookupEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CheckupFormValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.ItemLookupEntity, this))
                    {
                        item.ItemLookupEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
