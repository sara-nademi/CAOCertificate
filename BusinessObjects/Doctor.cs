//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Doctor : Person
    {
        #region Primitive Properties
    
        public virtual int ExpertiseLookupID
        {
            get { return _expertiseLookupID; }
            set
            {
                if (_expertiseLookupID != value)
                {
                    if (ExpertiseLookupEntity != null && ExpertiseLookupEntity.Id != value)
                    {
                        ExpertiseLookupEntity = null;
                    }
                    _expertiseLookupID = value;
                }
            }
        }
        private int _expertiseLookupID;
    
        public virtual int DoctorType
        {
            get;
            set;
        }
    
        public virtual Nullable<int> MedicalNumber
        {
            get;
            set;
        }
    
        public virtual Nullable<int> Grade
        {
            get;
            set;
        }
    
        public virtual byte[] Signiture
        {
            get;
            set;
        }
    
        public virtual byte[] Stamp
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Lookup ExpertiseLookupEntity
        {
            get { return _expertiseLookupEntity; }
            set
            {
                if (!ReferenceEquals(_expertiseLookupEntity, value))
                {
                    var previousValue = _expertiseLookupEntity;
                    _expertiseLookupEntity = value;
                    FixupExpertiseLookupEntity(previousValue);
                }
            }
        }
        private Lookup _expertiseLookupEntity;
    
        public virtual ICollection<Request_Doctor> Request_Doctors
        {
            get
            {
                if (_request_Doctors == null)
                {
                    var newCollection = new FixupCollection<Request_Doctor>();
                    newCollection.CollectionChanged += FixupRequest_Doctors;
                    _request_Doctors = newCollection;
                }
                return _request_Doctors;
            }
            set
            {
                if (!ReferenceEquals(_request_Doctors, value))
                {
                    var previousValue = _request_Doctors as FixupCollection<Request_Doctor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRequest_Doctors;
                    }
                    _request_Doctors = value;
                    var newValue = value as FixupCollection<Request_Doctor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRequest_Doctors;
                    }
                }
            }
        }
        private ICollection<Request_Doctor> _request_Doctors;
    
        public virtual ICollection<Office> Offices
        {
            get
            {
                if (_offices == null)
                {
                    var newCollection = new FixupCollection<Office>();
                    newCollection.CollectionChanged += FixupOffices;
                    _offices = newCollection;
                }
                return _offices;
            }
            set
            {
                if (!ReferenceEquals(_offices, value))
                {
                    var previousValue = _offices as FixupCollection<Office>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupOffices;
                    }
                    _offices = value;
                    var newValue = value as FixupCollection<Office>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupOffices;
                    }
                }
            }
        }
        private ICollection<Office> _offices;

        #endregion
        #region Association Fixup
    
        private void FixupExpertiseLookupEntity(Lookup previousValue)
        {
            if (previousValue != null && previousValue.Doctors.Contains(this))
            {
                previousValue.Doctors.Remove(this);
            }
    
            if (ExpertiseLookupEntity != null)
            {
                if (!ExpertiseLookupEntity.Doctors.Contains(this))
                {
                    ExpertiseLookupEntity.Doctors.Add(this);
                }
                if (ExpertiseLookupID != ExpertiseLookupEntity.Id)
                {
                    ExpertiseLookupID = ExpertiseLookupEntity.Id;
                }
            }
        }
    
        private void FixupRequest_Doctors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Request_Doctor item in e.NewItems)
                {
                    item.DoctorEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Request_Doctor item in e.OldItems)
                {
                    if (ReferenceEquals(item.DoctorEntity, this))
                    {
                        item.DoctorEntity = null;
                    }
                }
            }
        }
    
        private void FixupOffices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Office item in e.NewItems)
                {
                    item.DoctorEntity = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Office item in e.OldItems)
                {
                    if (ReferenceEquals(item.DoctorEntity, this))
                    {
                        item.DoctorEntity = null;
                    }
                }
            }
        }

        #endregion
    }
}
