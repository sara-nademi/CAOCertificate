//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace CAOCertificate.BusinessObjects
{
    public partial class Request_Doctor
    {
        #region Primitive Properties
    
        public virtual int Id
        {
            get;
            set;
        }
    
        public virtual int DoctorID
        {
            get { return _doctorID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_doctorID != value)
                    {
                        if (DoctorEntity != null && DoctorEntity.Id != value)
                        {
                            DoctorEntity = null;
                        }
                        _doctorID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _doctorID;
    
        public virtual Nullable<int> MedicalRequestID
        {
            get { return _medicalRequestID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_medicalRequestID != value)
                    {
                        if (MedicalRequestEntity != null && MedicalRequestEntity.Id != value)
                        {
                            MedicalRequestEntity = null;
                        }
                        _medicalRequestID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _medicalRequestID;
    
        public virtual Nullable<System.DateTime> DoctorConfirmDate
        {
            get;
            set;
        }
    
        public virtual string Comment
        {
            get;
            set;
        }
    
        public virtual Nullable<byte> ResultExamination
        {
            get;
            set;
        }
    
        public virtual Nullable<int> PersonID
        {
            get { return _personID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_personID != value)
                    {
                        if (PersonEntity != null && PersonEntity.Id != value)
                        {
                            PersonEntity = null;
                        }
                        _personID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _personID;
    
        public virtual Nullable<bool> IsSelectedDoctor
        {
            get { return _isSelectedDoctor; }
            set { _isSelectedDoctor = value; }
        }
        private Nullable<bool> _isSelectedDoctor = false;
    
        public virtual System.DateTime InsertDate
        {
            get;
            set;
        }
    
        public virtual string InsertUserName
        {
            get { return _insertUserName; }
            set { _insertUserName = value; }
        }
        private string _insertUserName = "30";
    
        public virtual string UpdateUserName
        {
            get { return _updateUserName; }
            set { _updateUserName = value; }
        }
        private string _updateUserName = "30";
    
        public virtual Nullable<System.DateTime> UpdateDate
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Doctor DoctorEntity
        {
            get { return _doctorEntity; }
            set
            {
                if (!ReferenceEquals(_doctorEntity, value))
                {
                    var previousValue = _doctorEntity;
                    _doctorEntity = value;
                    FixupDoctorEntity(previousValue);
                }
            }
        }
        private Doctor _doctorEntity;
    
        public virtual MedicalRequest MedicalRequestEntity
        {
            get { return _medicalRequestEntity; }
            set
            {
                if (!ReferenceEquals(_medicalRequestEntity, value))
                {
                    var previousValue = _medicalRequestEntity;
                    _medicalRequestEntity = value;
                    FixupMedicalRequestEntity(previousValue);
                }
            }
        }
        private MedicalRequest _medicalRequestEntity;
    
        public virtual Person PersonEntity
        {
            get { return _personEntity; }
            set
            {
                if (!ReferenceEquals(_personEntity, value))
                {
                    var previousValue = _personEntity;
                    _personEntity = value;
                    FixupPersonEntity(previousValue);
                }
            }
        }
        private Person _personEntity;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupDoctorEntity(Doctor previousValue)
        {
            if (previousValue != null && previousValue.Request_Doctors.Contains(this))
            {
                previousValue.Request_Doctors.Remove(this);
            }
    
            if (DoctorEntity != null)
            {
                if (!DoctorEntity.Request_Doctors.Contains(this))
                {
                    DoctorEntity.Request_Doctors.Add(this);
                }
                if (DoctorID != DoctorEntity.Id)
                {
                    DoctorID = DoctorEntity.Id;
                }
            }
        }
    
        private void FixupMedicalRequestEntity(MedicalRequest previousValue)
        {
            if (previousValue != null && previousValue.Request_Doctors.Contains(this))
            {
                previousValue.Request_Doctors.Remove(this);
            }
    
            if (MedicalRequestEntity != null)
            {
                if (!MedicalRequestEntity.Request_Doctors.Contains(this))
                {
                    MedicalRequestEntity.Request_Doctors.Add(this);
                }
                if (MedicalRequestID != MedicalRequestEntity.Id)
                {
                    MedicalRequestID = MedicalRequestEntity.Id;
                }
            }
            else if (!_settingFK)
            {
                MedicalRequestID = null;
            }
        }
    
        private void FixupPersonEntity(Person previousValue)
        {
            if (previousValue != null && previousValue.RequestDoctors.Contains(this))
            {
                previousValue.RequestDoctors.Remove(this);
            }
    
            if (PersonEntity != null)
            {
                if (!PersonEntity.RequestDoctors.Contains(this))
                {
                    PersonEntity.RequestDoctors.Add(this);
                }
                if (PersonID != PersonEntity.Id)
                {
                    PersonID = PersonEntity.Id;
                }
            }
            else if (!_settingFK)
            {
                PersonID = null;
            }
        }

        #endregion
    }
}
